(ns proj.evolver)


(def allocation ["Real Estate"
                 "Private Equity"
                 "Public Securities"
                 "Inflationary Hedge"])

;defines the portfolio details
;Risk and cash are the only things we will be considering but we need to define what range "low" "average" and "High" risk means
(def portfolio_details {"Risk" "average"
                        "Cash" 100000})


(def RealEstate
  ;These are a mix of Real Estate investment funds, Direct RE investments and Real Estate trusts
  ;Risk and return potential will be defined below
  ;Direct investment is riskier and less public information is available, so the return ratio will be an average of what we can find online
  {"Blackstone I" 1.09
   "Blackstone II" 1.15
   "Direct Investment I" 1.103
   "Direct Investment II" 1.20
   "REIT I" 1.06
   "REIT II" 1.03})
(def PrivateEquity
  ;These are a mix of bulge bracket PE funds, Venture funds and Angel investing
  ;These three catagories vary in risk, but also in return potential
  ;The risk to return ratios will be set later and impliment a random element to dictate how each investment performes within a range
  {"General Atlantic Fund" 1.09
   "Blackstone Fund" 1.15
   "KKR Fund" 1.103
   "Boutique Venture Fund" 1.20
   "Angel Investor" 1.06
   "Angel Investor II" 1.03})
(def PublicSecurities
  {}
  ;need to fill this section in after speaking with group
  )

(def treasuryBonds
  ;These are government treasury bonds
  ;These are defined by the fed and change frequently but for this project we are using the rates as of 5/2/23
  {"3 Month Bond" 1.049
   "6 Month Bond" 1.047
   "12 Month Bond" 1.044
   "2 Year Bond" 1.037
   "5 Year Bond" 1.033})


(def createPortfolio
  ;There is a random return within the average range 
  (let [realEstate {"RE fund I" (+ 0.9 (* 0.35 (rand)))
                    "RE fund II" (+ 0.9 (* 0.35 (rand)))
                    "Direct Investment I" (+ 0.8 (* 0.6 (rand)))
                    "Direct Investment II" (+ 0.8 (* 0.6 (rand)))
                    "REIT I" (+ 0.95 (* 0.15 (rand)))
                    "REIT II" (+ 0.95 (* 0.15 (rand)))}
        privateEquity {"PE Fund I" (+ 0.9 (* 0.3 (rand)))
                       "PE Fund II" (+ 0.9 (* 0.35 (rand)))
                       "VC Fund I" (+ 0.75 (* 0.75 (rand)))
                       "VC Fund II" (+ 0.75 (* 0.68 (rand)))}
        publicSecurities {"Stock I" (+ 0.95 (* 0.19 (rand)))
                          "Stock II" (+ 0.95 (* 0.19 (rand)))
                          "Stock III" (+ 0.95 (* 0.19 (rand)))
                          "Stock IV" (+ 0.95 (* 0.18 (rand)))}
        inflationaryHedge {"3 Month Bond" 1.05
                           "6 Month Bond" 1.06
                           "12 Month Bond" 1.065
                           "2 Year Bond" 1.07
                           "5 Year Bond" 1.075}]
    ;This creates a random portfolio creation that takes 2 investments from each bucket
    (fn []
      {"Real Estate" (take 2 (shuffle (seq realEstate)))
       "Private Equity" (take 2 (shuffle (seq privateEquity)))
       "Public Securities" (take 2 (shuffle (seq publicSecurities)))
       "Inflationary Hedge" (take 2 (shuffle (seq inflationaryHedge)))})))


;
(def createPortfolio2
  ;Portfolio Parameters, preventing evaluation of returns
  {:realEstate {"RE fund I" '(+ 0.9 (* 0.35 (rand)))
                "RE fund II" '(+ 0.9 (* 0.35 (rand)))
                "Direct Investment I" '(+ 0.8 (* 0.6 (rand)))
                "Direct Investment II" '(+ 0.8 (* 0.6 (rand)))
                "REIT I" '(+ 0.95 (* 0.15 (rand)))
                "REIT II" '(+ 0.95 (* 0.15 (rand)))}
   :privateEquity {"PE Fund I" '(+ 0.9 (* 0.3 (rand)))
                   "PE Fund II" '(+ 0.9 (* 0.35 (rand)))
                   "VC Fund I" '(+ 0.75 (* 0.75 (rand)))
                   "VC Fund II" '(+ 0.75 (* 0.68 (rand)))}
   :publicSecurities {"Stock I" '(+ 0.95 (* 0.19 (rand)))
                      "Stock II" '(+ 0.95 (* 0.19 (rand)))
                      "Stock III" '(+ 0.95 (* 0.19 (rand)))
                      "Stock IV" '(+ 0.95 (* 0.18 (rand)))}
   :inflationaryHedge {"3 Month Bond" 1.05
                       "6 Month Bond" 1.06
                       "12 Month Bond" 1.065
                       "2 Year Bond" 1.07
                       "5 Year Bond" 1.075}})
    ;This creates a random portfolio creation that takes 2 investments from each bucket
(defn genp [portlist]
  {"Real Estate" (take 2 (shuffle (seq (:realEstate portlist))))
   "Private Equity" (take 2 (shuffle (seq (:privateEquity portlist))))
   "Public Securities" (take 2 (shuffle (seq (:publicSecurities portlist))))
   "Inflationary Hedge" (take 2 (shuffle (seq (:inflationaryHedge portlist))))})




(defn evalport
  "Creates a portfolio with it's return values"
  [m]
  (into {}
        (map (fn [[k v]]
               [k (mapv (fn [x]
                          (if (vector? x)
                            (vector (first x) (eval (second x)))
                            x))
                        v)])
             m)))

;produces four weights that add up to 1
(defn get-weights
  []
  (let [w1 (rand)
        w2 (rand (- 1 w1))
        w3 (rand (- 1 w1 w2))
        w4 (- 1 (+ w1 w2 w3))]
    [w1 w2 w3 w4]))
(get-weights)
(def weights (get-weights))
(get weights 0)
(get weights 1)
(get weights 2)
(get weights 3)

;shows the weights adding to one work
(+ (get weights 0)
(get weights 1)
(get weights 2)
(get weights 3))




(defn calculatePortfolioReturns 
  [portfolio totalCash alloc]
  (let [realEstateAlloc (* totalCash (nth alloc 0))
        privateEquityAlloc (* totalCash (nth alloc 1))
        publicSecuritiesAlloc (* totalCash (nth alloc 2))
        inflationaryHedgeAlloc (* totalCash (nth alloc 3))
        realEstateReturns (map #(* realEstateAlloc (* %1 0.5)) (filter number? (flatten (get portfolio "Real Estate"))))
        privateEquityReturns (map #(* privateEquityAlloc (* %1 0.5)) (filter number? (flatten (get portfolio "Private Equity"))))
        publicSecuritiesReturns (map #(* publicSecuritiesAlloc (* %1 0.5)) (filter number? (flatten (get portfolio "Public Securities"))))
        inflationaryHedgeReturns (map #(* inflationaryHedgeAlloc (* %1 0.5)) (filter number? (flatten (get portfolio "Inflationary Hedge"))))]
    (reduce + (concat realEstateReturns privateEquityReturns publicSecuritiesReturns inflationaryHedgeReturns))))


(defn calculateAvtgReturns
  [individual totalcash]
  (/ (reduce + (repeatedly 100 #(calculatePortfolioReturns
                    (evalport (:port-params individual))
                    totalcash
                    (:genome individual)))) 
     100))

(defn standard-deviation [data]
  (let [n (count data)
        mean (/ (apply + data) n)
        deviations (map #(- % mean) data)
        squares (map #(* % %) deviations)
        sum-squares (apply + squares)]
    (Math/sqrt (/ sum-squares n))))

(defn port_risk
  [portfolio-params]
 (standard-deviation (repeatedly 100 #(calculatePortfolioReturns
                                            (evalport (:port-params portfolio-params))
                                            10000
                                            (:genome portfolio-params)))
  ))





(calculatePortfolioReturns portfolio 100000 weights)


(defn make-individual
  [port totalCash]
  (let [weights (get-weights)
        x (repeatedly 100 #(calculatePortfolioReturns
                            (evalport port)
                            totalCash
                            weights))]
    {:genome weights :port-params port 
     :avg-return (/ (reduce + x) 100) 
     :risk (standard-deviation x)
     :diversity (* (rand) 5)}  ;Placeholder
    ))

(defn fittest
  [individuals, metric, op]
  (let [x (reduce (fn [i1 i2]
                    
                      (if (op (metric i1) (metric i2))
                      i1
                      i2))
                  individuals)]
    x))

;Simple tournament selectio as shown in class
(defn tourny-select
  "Returns an individual selected from population using a tournament"
  [population]
  (fittest (repeatedly 5 #(rand-nth population))))
;; => Syntax error compiling at (g:\My Drive\Evolutionary Computation Spring 2023\Portfolio 10\portfolio.clj:153:3).
;;    Unable to resolve symbol: fittest in this context



(defn similar-fitness [num1 num2]
  (if (< (/ (Math/abs (- num1 num2)) num1) 0.1)
    true
    false
))


;cases = x,y,z
  ;return relatively similar bests of first shuffle cases
  ;return relatively similar bests of second shuffle cases
  ;return relatively similar bests of those


;Creating Test stuff

(def testparams (genp createPortfolio2))

(def testpop (repeatedly 10 #(make-individual testparams 10000)))


(def cases [:avg-return :risk :diversity])

(defn lexi [pop, casein]
  (if (empty? casein) (rand-nth pop)
      (let [cases (shuffle casein)
            thiscase (first cases)
            nextset (if (= thiscase ":avg-return")
                      (reverse (sort-by thiscase pop))
                      (sort-by thiscase pop))]
        (loop [x nextset
               bestport (first x)
               returns [(first x)]]
          (if (< (count x) 2)
            (rand-nth returns)
            (if (similar-fitness
                 (thiscase bestport)
                 (thiscase (second x)))
        ;  (do (print returns) (println) 
              (recur (rest x) bestport (conj returns (second x)))
              (if (< (count returns) 2)
                (rand-nth returns)
                (lexi returns (remove #(= thiscase %) casein)))))))))
  



(defn mutators
  []
  (let [w1 (rand 0.05)
        w2 (rand 0.05)
        w3 (rand (- 0 w1 w2))
        w4 (- 0 (+ w1 w2 w3))]
    [w1 w2 w3 w4]))

(defn mutate [individual totalcash]
  (if (< (rand) 0.5)
    (let [x (:genome individual)
          port (:port-params individual)]
      (let [y (vec (map + x (shuffle (mutators))))]
        (if (some #(neg? %)  y)
          (mutate individual totalcash)
          (let [x (repeatedly 100 #(calculatePortfolioReturns
                                    (evalport port)
                                    totalcash
                                    y))]
            {:genome y :port-params port
             :avg-return (/ (reduce + x) 100)
             :risk (standard-deviation x)
             :diversity (:diversity individual)}))))
    individual))

(defn evolve
  [population gens totalcash]
  (loop [generation 0
         population population]
    (let [best (lexi population cases)]
      (print "\nGeneration: " generation
             "\nAvg-Return: " (:avg-return best)
             "\nRisk: " (:risk best)
             "\nDiversity: " (:diversity best)
             "\n")
      ;(spit "Result.txt" (str "Generation: " generation " How-close: " (:fitness best) "\n") :append true)
      (if (= gens generation)
        best
        ;(spit "Result.txt" best :append true)
        (let [better-half (take (/ (count population) 2) (repeatedly #(lexi population cases)))]
          (recur
           (inc generation)
           (map #(mutate % totalcash)
                (concat better-half better-half) )))))))

(defn take5 [pop, returners]
  (let [x (lexi pop cases)]
    (remove #(= x %) pop))

;get the specific buckets
(get portfolio "Real Estate")
(get portfolio "Private Equity")
(get portfolio "Public Securities")
(get portfolio "Inflationary Hedge")

;get the specific investments
(nth (get portfolio "Real Estate") 0)
(nth (get portfolio "Real Estate") 1)
(nth (get portfolio "Private Equity") 0)
(nth (get portfolio "Private Equity") 1)
(nth (get portfolio "Public Securities") 0)
(nth (get portfolio "Public Securities") 1)
(nth (get portfolio "Inflationary Hedge") 0)
(nth (get portfolio "Inflationary Hedge") 1)





